name: Create Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (leave empty for first release)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Fetch full history
        run: |
          git fetch --prune --unshallow || true
          git fetch --tags
      
      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "### What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          
          # Determine the range for changelog
          if [ -n "${{ github.event.inputs.previous_version }}" ]; then
            LAST_TAG="${{ github.event.inputs.previous_version }}"
            GIT_LOG_RANGE="$LAST_TAG..HEAD"
            RANGE="$LAST_TAG..${{ github.event.inputs.version }}"
          else
            # For first release, get all history
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
            GIT_LOG_RANGE="HEAD"
            RANGE=""
          fi
          
          # Check for breaking changes first
          BREAKING=$(git log $GIT_LOG_RANGE --pretty=format:'%s' | grep -E '!:|BREAKING CHANGE:' | sed 's/^.*!: */    💥 Breaking: /')
          if [ ! -z "$BREAKING" ]; then
            echo "### ⚠️ Breaking Changes" >> release_notes.md
            echo "" >> release_notes.md
            echo "$BREAKING" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Features and Fixes
          FEATURES=$(git log $GIT_LOG_RANGE --pretty=format:'%s' | grep -E '^feat(\([^)]+\))?:' | sed 's/^feat\([^)]*\): */    ✨ /')
          if [ ! -z "$FEATURES" ]; then
            echo "### 🚀 Features" >> release_notes.md
            echo "$FEATURES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          FIXES=$(git log $GIT_LOG_RANGE --pretty=format:'%s' | grep -E '^fix(\([^)]+\))?:' | sed 's/^fix\([^)]*\): */    🐛 /')
          if [ ! -z "$FIXES" ]; then
            echo "### 🔧 Bug Fixes" >> release_notes.md
            echo "$FIXES" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Performance and Refactoring
          PERF=$(git log $GIT_LOG_RANGE --pretty=format:'%s' | grep -E '^perf(\([^)]+\))?:' | sed 's/^perf\([^)]*\): */    ⚡️ /')
          REFACTOR=$(git log $GIT_LOG_RANGE --pretty=format:'%s' | grep -E '^refactor(\([^)]+\))?:' | sed 's/^refactor\([^)]*\): */    ♻️ /')
          if [ ! -z "$PERF$REFACTOR" ]; then
            echo "### 🔨 Improvements" >> release_notes.md
            echo "$PERF$REFACTOR" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Only show full changelog for non-first releases
          if [ -n "${{ github.event.inputs.previous_version }}" ]; then
            echo "Full Changelog: https://github.com/${{ github.repository }}/compare/${{ github.event.inputs.previous_version }}...${{ github.event.inputs.version }}" >> release_notes.md
          fi
          
      - name: Create Tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README.md version
        run: |
          # Update the package version in README.md
          sed -i.bak 's/\.package(url: "https:\/\/github\.com\/diokaratzas\/fluent-content-macro\.git", from: "[^"]*")/\.package(url: "https:\/\/github\.com\/diokaratzas\/fluent-content-macro\.git", from: "${{ github.event.inputs.version }}")/' README.md
          rm README.md.bak
          
          # Commit and push the changes
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git commit -m "docs: update version in README.md to ${{ github.event.inputs.version }} [skip ci]"
          git push 